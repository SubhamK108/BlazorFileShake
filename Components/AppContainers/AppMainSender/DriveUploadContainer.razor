@inject IJSRuntime JS

@if (!IsError)
{
    <div class="h-full w-full p-5 max-sm:p-4 flex flex-col justify-center items-center gap-5">
        <div class="h-[15%] w-full flex flex-col justify-center items-center animate-pulse">
            <p class="text-[2rem] max-2xl:text-[1.8rem] max-sm:text-[1.3rem] text-center font-mono tracking-wide">@AppState.ProgressInfo</p>
        </div>
        <div class="h-[85%] w-full flex flex-col justify-center items-center">
            <div class="animate-bounce">
                <i class="text-[14rem] max-2xl:text-[11rem] max-sm:text-[8.5rem] mb-8 max-2xl:mb-5 max-sm:mb-5 drop-shadow-xl dark:drop-shadow-2xl fa-solid fa-cloud-arrow-up"></i>
            </div>
            <div class="text-[1.5rem] max-sm:text-[1.1rem] text-center">
                <p>
                    Preparing your @(AppState.UploadedFiles.Count > 1 ? "files" : "file") for sharing, this might take some
                    time depending on the total size & the internet speed, so hold tight!
                </p>
            </div>
        </div>
    </div>
}
else 
{
    <ErrorContainer 
        ErrorText="A problem occurred while uploading & sharing your file, please try again." 
        ErrorAction="@TryAgainIfFailed" 
        ErrorButtonText="Try Again" 
    />
}

@code {
    [Parameter] public Action UpdateAppMainState { get; init; } = () => { };
    [Parameter] public Func<Task> UpdateAppMainStateAsync { get; init; } = () => Task.CompletedTask;
    private bool IsError { get; set; } = false;
    private Timer? _timer = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        await StartDriveUpload();
    }

    private async Task StartDriveUpload()
    {
        if (AppState.UploadedFiles.Count > 1)
        {
            AppState.ProgressInfo = "Zipping your files...";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1500);

            using MemoryStream compressedStream = new();
            using ZipArchive archive = new(compressedStream, ZipArchiveMode.Create);
            foreach (UploadedFile file in AppState.UploadedFiles)
            {
                ZipArchiveEntry zipEntry = archive.CreateEntry(file.FileName);
                using Stream zipEntryStream = zipEntry.Open();
                using MemoryStream originalFileStream = new(file.FileBytes);
                await originalFileStream.CopyToAsync(zipEntryStream);
            }
            archive.Dispose();
            byte[] compressedBytes = compressedStream.ToArray();
            await ProcessDriveUpload(compressedBytes, $"{AppState.FinalZipFileName.Trim()}.zip", "application/zip");
        }
        else
        {
            await ProcessDriveUpload
            (
                AppState.UploadedFiles[0].FileBytes,
                AppState.UploadedFiles[0].FileName,
                AppState.UploadedFiles[0].FileType
            );
        }
    }

    private async Task ProcessDriveUpload(byte[] fileByteArray, string fileName, string fileType)
    {
        AppState.ProgressInfo = "Uploading: 0%";
        await InvokeAsync(StateHasChanged);

        string folderId = await DriveService.CheckForUploadFolder();
        if (folderId.Equals("Error"))
        {
            IsError = true;
            return;
        }
        else if (folderId.Equals(""))
        {
            folderId = await DriveService.CreateUploadFolder();
            if (folderId.Equals("Error"))
            {
                IsError = true;
                return;
            }
        }
        string downloadLink = await StartFileUpload(fileByteArray, fileName, fileType, folderId);
        if (downloadLink.Equals("Error"))
        {
            IsError = true;
        }
        else
        {
            AppState.ProgressInfo = "Uploading: 100%";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1500);

            AppState.ProgressInfo = "Almost done...";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(2000);

            AppState.FinalDownloadLink = downloadLink;
            AppState.IsDriveUploadComplete = true;
            await UpdateAppMainStateAsync();
        }
    }

    private async Task<string> StartFileUpload(byte[] fileByteArray, string fileName, string fileType, string folderId)
    {
        StartProgressTimer(fileByteArray.LongLength);
        string uploadResult = await DriveService.UploadFile(fileByteArray, fileName, fileType, folderId);
        _timer!.Dispose();
        return uploadResult;
    }

    private void StartProgressTimer(long fileSize)
    {
        long uploadSpeed = 512000;
        long estimatedTime = (long)(fileSize / (double)uploadSpeed * 100);
        long intervalTime = Math.Min(estimatedTime / 100, 1000);
        DateTime startTime = DateTime.Now;
        _timer = new(async _ =>
        {
            TimeSpan elapsedTime = DateTime.Now - startTime;
            int progressPercent = Math.Min((int)((elapsedTime.TotalMilliseconds / estimatedTime) * 100), 100);
            if (progressPercent > 0)
            {
                AppState.ProgressInfo = $"Uploading: {progressPercent}%";
                await InvokeAsync(StateHasChanged);
            }
            if (progressPercent >= 100)
            {
                _timer!.Dispose();
            }
        }, null, 0, intervalTime);
    }

    private void TryAgainIfFailed()
    {
        AppState.RefreshAppState();
        UpdateAppMainState();
    }
}
