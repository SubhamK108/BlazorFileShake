@inject IJSRuntime JS

@if (!IsLoading)
{
    <div class="h-full w-full p-16 max-sm:p-8 flex flex-col justify-center items-center gap-5">
        <div class="flex flex-col justify-center items-center text-center gap-20 max-2xl:gap-12 max-sm:gap-10">
            <p class="text-[1.8rem] max-2xl:text-[1.6rem] max-sm:text-[1.25rem]">
                FileShake uses your personal Google Drive storage to share files. All shared files will be stored
                in the <i>"FileShake"</i> folder, and <b>only these files</b> will be accessible to FileShake, nothing else.
            </p>
            <div class="flex flex-col justify-center items-center text-center gap-5 max-2xl:gap-5 max-sm:gap-3">
                <p class="text-[1.3rem] max-2xl:text-[1.1rem] max-sm:text-[0.95rem]">
                    Sign in to proceed, and make sure to allow the pop-ups:
                </p>
                <SignInButton />            
                <div class="max-sm:text-[0.9rem] font-sans flex flex-row justify-center items-center gap-3">
                    <a href="/privacy-policy" target="_blank" class="underline hover:text-[#26272A] dark:hover:text-white">
                        Privacy Policy
                    </a>
                    â€¢
                    <a href="/tos" target="_blank" class="underline hover:text-[#26272A] dark:hover:text-white">
                        Other Details
                    </a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="h-full w-full flex justify-center items-center">
        <Spinner />
    </div>
}

@code {
    [Parameter] public Action UpdateAppMainState { get; init; } = () => { };
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        string userToken = await JS.InvokeAsync<string>("sessionStorage.getItem", "USER_GOOGLE_AUTH_TOKEN");
        while (userToken is null || userToken.Equals(""))
        {
            await Task.Delay(1000);
            userToken = await JS.InvokeAsync<string>("sessionStorage.getItem", "USER_GOOGLE_AUTH_TOKEN");
        }
        IsLoading = true;
        StateHasChanged();
        await JS.InvokeVoidAsync("sessionStorage.removeItem", "USER_GOOGLE_AUTH_TOKEN");
        await Task.Delay(1000);

        AppState.UserToken = userToken;
        AppState.IsSignedIn = true;
        UpdateAppMainState();
    }
}